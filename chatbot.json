AWSTemplateFormatVersion: '2010-09-09'

Resources:
  ChatUsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ChatUsers
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ChatMessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ChatMessages
      AttributeDefinitions:
        - AttributeName: MessageId
          AttributeType: S
      KeySchema:
        - AttributeName: MessageId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ChatUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ChatUserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      AutoVerifiedAttributes:
        - email

  ChatUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: ChatAppClient
      UserPoolId: !Ref ChatUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  ChatLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ChatLambda
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt ChatLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello from ChatLambda!')
              }
      Timeout: 10

  ChatLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaDynamoDBPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Scan
                Resource: 
                  - !GetAtt ChatMessagesTable.Arn
                  - !GetAtt ChatUsersTable.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - execute-api:ManageConnections
                Resource: "arn:aws:execute-api:*:*:*/*"

  ChatLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ChatLambdaFunction
      Principal: apigateway.amazonaws.com

  ChatConnectFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ChatConnectLambda
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt ChatLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          dynamodb = boto3.client('dynamodb')

          def lambda_handler(event, context):
              connection_id = event['requestContext']['connectionId']
              dynamodb.put_item(
                  TableName='ChatUsers',
                  Item={'UserId': {'S': connection_id}}
              )
              return {'statusCode': 200, 'body': 'Connected!'}
      Timeout: 10

  ChatDisconnectFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ChatDisconnectLambda
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt ChatLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          dynamodb = boto3.client('dynamodb')

          def lambda_handler(event, context):
              connection_id = event['requestContext']['connectionId']
              dynamodb.delete_item(
                  TableName='ChatUsers',
                  Key={'UserId': {'S': connection_id}}
              )
              return {'statusCode': 200, 'body': 'Disconnected!'}
      Timeout: 10

  ChatSendMessageFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ChatSendMessageLambda
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt ChatLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          dynamodb = boto3.client('dynamodb')
          apigateway = boto3.client('apigatewaymanagementapi', endpoint_url=os.environ['WEBSOCKET_URL'])

          def lambda_handler(event, context):
              try:
                  body = json.loads(event.get('body', '{}'))
                  action = body.get('action')
                  message = body.get('message', '')

                  if action != "sendmessage":
                      return {'statusCode': 400, 'body': 'Invalid action'}

                  connections = dynamodb.scan(TableName='ChatUsers')['Items']

                 
 
                  
                  for conn in connections:
                      connection_id = conn['UserId']['S']
                      try:
                          apigateway.post_to_connection(ConnectionId=connection_id, Data=json.dumps({'message': message}))
                      except Exception as e:
                          print(f"Failed to send message to {connection_id}: {str(e)}")
                  
                  return {'statusCode': 200, 'body': 'Message Sent!'}
              except Exception as e:
                  print(f"Error: {str(e)}")
                  return {'statusCode': 500, 'body': 'Internal Server Error'}
      Timeout: 10
      Environment:
        Variables:
          WEBSOCKET_URL: "https://ibx8i058uk.execute-api.ap-south-1.amazonaws.com/production/"

Outputs:
  ChatUserPoolId:
    Value: !Ref ChatUserPool
    Description: "ID of the Cognito User Pool"
  ChatUserPoolClientId:
    Value: !Ref ChatUserPoolClient
    Description: "ID of the Cognito User Pool Client"


